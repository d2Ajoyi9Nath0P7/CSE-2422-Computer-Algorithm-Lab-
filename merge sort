#include<bits/stdc++.h>
using namespace std;

void merge(int low,int mid,int high,vector<int>&vec)
{
    int n = vec.size();
    int left = low;
    int right = mid + 1;
    vector<int>temp;

    while(left <= mid && right <= high)
    {
        if(vec[left] <= vec[right])
        {
            temp.push_back(vec[left]);
            left++;
        }
        else
        {
            temp.push_back(vec[right]);
            right++;
        }
    }

    while(left <= mid)
    {
        temp.push_back(vec[left]);
        left++;
    }
    while(right <= high)
    {
        temp.push_back(vec[right]);
        right++;
    }

    for(int i = low ; i <= high ; i++)
    {
        vec[i] = temp[i-low];
    }
}

void merge_Sort(int low,int high,vector<int>&vec)
{
    if(low >= high)
    {
        return;
    }
    if(low < high)
    {
        int mid = (low + high) / 2;
        merge_Sort(low,mid,vec);
        merge_Sort(mid+1,high,vec);
        merge(low,mid,high,vec);
    }
}

int main()
{
    int n;
    cin>>n;
    vector<int>vec(n);
    for(int i = 0 ; i < n ; i++)
    {
        cin>>vec[i];
    }
    int low = 0,high = n-1;
    merge_Sort(low,high,vec);

    for(auto i : vec)
    {
        cout<<i<<" ";
    }
    cout<<"\n";
}


/*

Case                Time Complexity      Space Complexity          Condition

Best Case           O(nlog(n))           O(n)                      Asecending Sorted Ordered 
Average Case        O(nlog(n))           O(n)                      Random Ordered
Worst Case          O(nlog(n))           O(n)                      Reverse Sorted Ordered



Mechine Configuration 
Processor : Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz (1.80 GHz)
RAM : 8GB DDR4
Operating System : Windows 11 Pro 64 bit

*/
